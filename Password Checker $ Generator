# Pip Install Colorama
# Pip Install zxcvbn
# pip install password_strength


import zxcvbn
import secrets
import string
import time
from password_strength import PasswordPolicy

from colorama import Fore, Style

def print_logo():
    logo = f"""
    {Fore.GREEN}
╔═══╗───╔╗───────╔═══╗───────╔╗
║╔═╗║───║║───────║╔═╗║───────║║
║║─╚╬╗─╔╣╚═╦══╦═╗║╚═╝╠══╦══╦═╝╠╗─╔╗
║║─╔╣║─║║╔╗║║═╣╔╝║╔╗╔╣║═╣╔╗║╔╗║║─║║
║╚═╝║╚═╝║╚╝║║═╣║─║║║╚╣║═╣╔╗║╚╝║╚═╝║
╚═══╩═╗╔╩══╩══╩╝─╚╝╚═╩══╩╝╚╩══╩═╗╔╝
────╔═╝║──────────────────────╔═╝║
────╚══╝──────────────────────╚══╝


                  𝓑𝔂 𝓐𝓷𝓭𝓻𝓮𝓼 𝓣𝓻𝓮𝓿𝓲𝓷𝓸
                  cyberready.world
                  11-22-23 (5:33 AM)

          "In the world of hacking, knowledge is power.
             Embrace curiosity and unlock new possibilities."
{Style.RESET_ALL}
"""
    print(logo)

def get_yes_no_input(prompt): # Yes or No End User inputs to avoid confusion
    while True:
        user_input = input(prompt).lower()
        if user_input == 'y':
            return True
        elif user_input == 'n':
            return False
        else:
            print("Invalid input. Please enter 'y' or 'n'.")

def interactive_password_test_length_upper_special(): # Policy 1
    while True:
        user_input = input("Enter a password to test (or type 'exit' to end): ")

        if user_input.lower() == 'exit':
            print("Exiting the program. Goodbye!")
            break  # Exit the loop and end the program

        # Example length, uppercase, and special characters policy
        policy_length_upper_special = PasswordPolicy.from_names(
            length=12,     # min length: 12
            uppercase=2,   # need min. 2 uppercase letters
            numbers=2,     # need min. 2 digits
            special=2,     # need min. 2 special characters
            nonletters=2,  # need min. 2 non-letter characters (digits, specials, anything)
        )

        result = policy_length_upper_special.test(user_input) # Policy 1 result
        if result:
            print(f"Password does not meet the recommended security policy requirements. Please Try Again. Failures: {result}")
            print("Consider the following tips:")
            print("- Password should be at least 12 characters long.")
            print("- Include at least 2 uppercase letters, 2 digits, and 2 special characters.")
        else:
            print("Password meets the recommended security policy requirements. Good job!")

        if not get_yes_no_input("Do you want to try another password against this security policy? (y/n): "):
            print("Returning to the main menu.")
            break  # Exit the loop and return to the main menu

def interactive_password_test_strength(): # Policy 2
    while True:
        # Example strength policy with a threshold (2.0)
        password_policy2 = PasswordPolicy.from_names(
            strength=2.0  # need a password that scores at least 0.62 with its strength
        )

        user_input = input("Enter a password to test (or type 'exit' to end): ")

        if user_input.lower() == 'exit':
            print("Exiting the program. Goodbye! Check out more custom Python tools @ CyberReady.World!")
            break  # Exit the loop and end the program

        result = zxcvbn.zxcvbn(user_input) #Policy 2 results and calculations
        calculated_score = result['score']

        if calculated_score < 3:
            print("Password does not meet the recommended strength requirements. Please Try Again.")
            print(f"Feedback: {', '.join(result['feedback']['suggestions'])}")
            print("Consider the following tips:")
            print("- Choose a longer password to increase its strength.")
            print("- Include a mix of uppercase letters, digits, and special characters.")
        elif calculated_score < 4:
            print("Password strength: Weak. Consider using a stronger password.")
            print(f"Feedback: {', '.join(result['feedback']['suggestions'])}")
            print("Consider the following tips:")
            print("- Aim for a higher score by choosing a more complex password.")
            print("- Use a combination of uppercase letters, digits, and special characters.")
        elif calculated_score < 4.5:
            print("Password strength: Medium. Good, but can be improved.")
            print(f"Feedback: {', '.join(result['feedback']['suggestions'])}")
            print("Consider the following tips:")
            print("- Enhance the password by adding more complexity.")
            print("- Include a mix of uppercase letters, digits, and special characters.")
        else:
            print("Password meets the recommended strength requirements. Good job!")
            print("Your password is strong, but it's always a good idea to update it periodically.")

        if not get_yes_no_input("Do you want to try another password against this security policy? (y/n): "):
            print("Returning to the main menu.")
            break  # Exit the loop and return to the main menu


def interactive_password_test_entropy(): # Policy 3
    while True:
        user_input = input("Enter a password to test (or type 'exit' to end): ")

        if user_input.lower() == 'exit':
            print("Exiting the program. Goodbye!")
            break  # Exit the loop and end the program

        result = zxcvbn.zxcvbn(user_input) # Policy 3 results
        if result['score'] < 3:  # Adjust the threshold as needed (e.g., 3 for medium strength)
            print(f"Password does not meet the recommended strength requirements. Please Try Again.")
            print("Consider the following tips:")
            print("- Choose a longer password to increase its strength.")
            print("- Include a mix of uppercase letters, digits, and special characters.")
        else:
            print("Password meets the recommended strength requirements. Good job!")
            print("Your password is strong, but it's always a good idea to update it periodically.")
            print("Additionally, consider the following tips:")
            print("- Avoid using easily guessable information such as your name, birthdate, or common words.")
            print("- Use a passphrase or a combination of unrelated words for added security.")

        if not get_yes_no_input("Do you want to try another password against this security policy? (y/n): "):
            print("Returning to the main menu.")
            break  # Exit the loop and return to the main menu
    

def generate_password(): #Policy 4
    print("Generating a strong password based on all policies...")

    # Define the criteria for a strong password
    length = 12
    uppercase_count = 2
    numbers_count = 2
    special_count = 2

    # Characters to choose from
    characters = string.ascii_letters + string.digits + string.punctuation

    while True:
        # Generate characters until the password meets the criteria
        password = ''.join(secrets.choice(characters) for _ in range(length))

        # Check if the generated password meets the defined criteria
        if (
            sum(1 for char in password if char.isupper()) >= uppercase_count
            and sum(1 for char in password if char.isdigit()) >= numbers_count
            and sum(1 for char in password if char in string.punctuation) >= special_count
        ):
            print(f"Generated password: {password}") # Policy Results 
            print("Note: This password is randomly generated based on the defined policies.")

            # Ask if the user wants to generate another password
            option = get_yes_no_input("Do you want to generate another password? (y/n): ")
            if option:
                continue  # Continue the loop to generate another password
            else:
                print("Returning to the main menu.")
                break  # Exit the loop and return to the main menu

# Interactive testing
print("Welcome to the Password Policy Checker!")
print_logo()

while True:
    print("Choose a password policy test:")
    print("1. (Length, Uppercase, and Special Characters, Numbers, Nonletter) Policy")
    print("2. Strength Policy Based on ZXCVBN library")
    print("3. Entropy Policy Based on ZXCVBN Calculations")
    print("4. Generate a Strong Password Based on All Policies")
    print("5. Exit")

    option = input("Enter the number of your choice: ")
    if option == '1':
        interactive_password_test_length_upper_special()
    elif option == '2':
        interactive_password_test_strength()
    elif option == '3':
        interactive_password_test_entropy()
    elif option == '4':
        generate_password()  # Call the new function for password generation
    elif option == '5':
        print_logo()
        print("Exiting the program. Goodbye! Check out CyberReady.World for more custom Python Tools")
        time.sleep(7.5)  # Introduce a 7.5-second delay before exiting
        break
    else:
        print("Invalid option. Please enter a valid number.")
